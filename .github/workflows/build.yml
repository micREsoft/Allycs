name: "Build Allycs"

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - '**/*.md'
      - '.github/**'
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '7e19f3c64cb636ee21f41bfe8558a6dfaae6236f'
        vcpkgJsonGlob: 'vcpkg.json'
        runVcpkgInstall: '--triplet=x64-windows-static --x-wait-for-lock'

    - name: Set Vcpkg Environment
      run: |
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $env:GITHUB_ENV
        echo "VcpkgRoot=${{ github.workspace }}/vcpkg" >> $env:GITHUB_ENV
        echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static" >> $env:GITHUB_ENV
        echo "CMAKE_WARN_UNUSED_CLI_VARS=OFF" >> $env:GITHUB_ENV
        echo "VCPKG_CMAKE_CONFIGURE_OPTIONS=-DCMAKE_WARN_UNUSED_CLI_VARS=OFF" >> $env:GITHUB_ENV

    - name: Setup Vcpkg Binary Caching
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg/installed
          ${{ github.workspace }}/vcpkg/packages
        key: vcpkg-${{ hashFiles('**/vcpkg.json') }}-${{ runner.os }}-x64-windows-static
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Integrate Vcpkg with MSBuild
      run: |
        & "${{ github.workspace }}/vcpkg/vcpkg.exe" integrate install

    - name: Verify SysCaller Dependencies
      run: |
        Write-Host "Checking SysCaller dependencies..."
        
        if (Test-Path "sdk\SysCaller\lib\SysCaller.lib") {
          Write-Host "SysCaller.lib found!"
        } else {
          Write-Host "SysCaller.lib not found!"
          exit 1
        }

        if (Test-Path "sdk\SysCaller\include\syscaller.h") {
          Write-Host "SysCaller headers found!"
        } else {
          Write-Host "SysCaller headers not found!"
          exit 1
        }

        if (Test-Path "sdk\SysCaller\lib\SysCaller.dll") {
          Write-Host "SysCaller.dll found!"
        } else {
          Write-Host "SysCaller.dll not found, required at runtime!"
        }

    - name: Build Solution (Release x64)
      run: |
        Write-Host "Building Release x64..."
        msbuild "Allycs.sln" /p:Configuration=Release /p:Platform=x64

    - name: Copy SysCaller DLL
      run: |
        $outputDir = "build\x64\Release"
        if (Test-Path "sdk\SysCaller\lib\SysCaller.dll") {
          Copy-Item "sdk\SysCaller\lib\SysCaller.dll" $outputDir
          Write-Host "Copied SysCaller.dll to Release build"
        }

    - name: Verify Build Output
      run: |
        $releaseExists = Test-Path "build\x64\Release\Allycs.exe"
        if (-not $releaseExists) {
          Write-Host "Allycs.exe not found!"
          exit 1
        }

    - name: Get Version from Tag or Default
      id: version
      run: |
        $tag = "${{ github.ref }}"
        if ($tag -match "refs/tags/v(.*)") {
          $version = $matches[1]
        } else {
          $version = "dev-$(Get-Date -Format yyyyMMdd-HHmmss)"
        }
        Write-Host "Version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Package Release
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $zipName = "Allycs-$version.zip"
        New-Item -ItemType Directory -Path "release-package" -Force
        Copy-Item "build\x64\Release\Allycs.exe" "release-package\"
        Copy-Item "build\x64\Release\SysCaller.dll" "release-package\" -ErrorAction SilentlyContinue
        Compress-Archive -Path "release-package\*" -DestinationPath $zipName -Force
        Write-Host "Created package $zipName"
      shell: pwsh

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "Allycs-${{ steps.version.outputs.version }}"
        path: Allycs-${{ steps.version.outputs.version }}.zip
        retention-days: 30

    - name: Create GitHub Release (tag builds only)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: "Allycs ${{ steps.version.outputs.version }}"
        body: |
          ## Allycs ${{ steps.version.outputs.version }}

          **Build Date:** ${{ github.event.head_commit.timestamp }}
          **Commit:** ${{ github.sha }}
          **Platform:** Windows x64 (64-bit)
        files: Allycs-${{ steps.version.outputs.version }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
